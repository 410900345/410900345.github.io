<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SukeYang的博客</title>
  <subtitle>记录下自己学习的点滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sukeyang.github.io/"/>
  <updated>2017-02-20T12:00:53.000Z</updated>
  <id>https://sukeyang.github.io/</id>
  
  <author>
    <name>SukeYang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>weex使用介绍</title>
    <link href="https://sukeyang.github.io/2017/02/17/weex%E4%BD%BF%E7%94%A8/"/>
    <id>https://sukeyang.github.io/2017/02/17/weex使用/</id>
    <published>2017-02-17T03:38:28.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>   最近在折腾weex,不过升级到vue2.0出现了一些问题,现在记录使用情况,暂时有一些问题没有解决,官方的链接:<br><a href="https://github.com/alibaba/weex" target="_blank" rel="external">weex官方github</a>   </p>
<p><a href="https://github.com/weexteam/weex-devtool-iOS/blob/master/README-zh.md" target="_blank" rel="external">weex-devtool-iOS</a></p>
<p><a href="https://github.com/weexteam/weex-hackernews/" target="_blank" rel="external">weexteam-demo</a></p>
<p>###基本介绍<br>1.安装环境,nodejs,下面是一些常用的命令.</p>
<p>IDE: Sublime Text + <a href="https://github.com/vuejs/vue-syntax-highlight" target="_blank" rel="external">vue-syntax-highlight</a></p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install</div><div class="line"><span class="built_in">npm</span> install -g weex-toolkit@beta</div><div class="line"><span class="built_in">npm</span> run build</div><div class="line"><span class="built_in">npm</span> run copy:ios</div></pre></td></tr></table></figure>
<p>2.开启服务</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">run</span><span class="bash"> serve</span></div></pre></td></tr></table></figure>
<p>3.开启debug,自动弹出页面</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">weex <span class="built_in">debug</span> <span class="comment">--verbose</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   最近在折腾weex,不过升级到vue2.0出现了一些问题,现在记录使用情况,暂时有一些问题没有解决,官方的链接:&lt;br&gt;&lt;a href=&quot;https://github.com/alibaba/weex&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;w
    
    </summary>
    
      <category term="BFE" scheme="https://sukeyang.github.io/categories/BFE/"/>
    
    
  </entry>
  
  <entry>
    <title>js基本用法(三)</title>
    <link href="https://sukeyang.github.io/2017/02/13/xuejs3/"/>
    <id>https://sukeyang.github.io/2017/02/13/xuejs3/</id>
    <published>2017-02-13T09:52:01.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>1.js没有类的概念,只有对象,就是继承也是通过对象的方式;constructor类似于类初始化函数,<br>prototype 是个类的对象;<br>2.保持原型链路的基础上,对父类对象的属性隔离;保证重用;</p>
<pre><code>var F = function(){};
F.prototype = TwoShape.prototype;
Triangle.prototype = new F();
</code></pre><p>3.将uber属性设置成了指向其父级原型的引用;</p>
<pre><code>my.uber = TwoShape.prototype;
</code></pre><p>4.继承函数封装,具体原理不懂;</p>
<pre><code>function extend(Child,Parent) {
var F = function(){};
F.prototype = Parent.prototype;
Child.prototype = new F;
Child.prototype.constructor =  Child;
Child.uber = Parent.prototype;

extend(TwoShape,shape);//使用内容    
</code></pre><p>属性的拷贝为自身的,基本数据类型是创建新的,函数和数组都是值的引用;新创建相当于忘记之前的对象,重新生成一个对象;    </p>
<pre><code>function extend2(Child, Parent) {
var p = Parent.prototype;
var c = Child.prototype;
for (var i in p ){
c[i] = p[i];
c.uber = p; 
    }
}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h3&gt;&lt;p&gt;1.js没有类的概念,只有对象,就是继承也是通过对象的方式;constructor类似于类初始化函数,&lt;br&gt;prototype 是个类的对
    
    </summary>
    
      <category term="js" scheme="https://sukeyang.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js基本用法(二)</title>
    <link href="https://sukeyang.github.io/2017/02/10/xuejs2/"/>
    <id>https://sukeyang.github.io/2017/02/10/xuejs2/</id>
    <published>2017-02-10T10:12:03.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常见类"><a href="#常见类" class="headerlink" title="常见类"></a>常见类</h3><p>1.Boolean 验证类的布尔值</p>
<pre><code>Boolean(&quot;&quot;)  false
Boolean(&quot;123&quot;)  true
</code></pre><p>2.Number任何都转成number,toString加参数转换</p>
<pre><code>var n = Number(&quot;123&quot;)
n.toString(2)  //1111011
</code></pre><p>3.String类对象方法</p>
<pre><code>test.toUpperCase();
test.toLocaleLowerCase()
test.indexOf(&quot;m&quot;,2) //返回某个指定的字符串值在字符串中2出现的位置。找不到为-1 
test.charAt(0)
</code></pre><p>字符串的搜索用下面的方式</p>
<pre><code>if(test.indexOf (&quot;c&quot;) == -1){
alert(&quot;yes&quot;);
}
</code></pre><p>substring()    提取字符串中两个指定的索引号之间的字符。<br>split()    把字符串分割为字符串数组。<br>concat()    连接两个或更多字符串，并返回新的字符串。<br>lastIndexOf()    从后向前搜索字符串。<br>4.math类常用数学常数</p>
<pre><code>Math.random()*100
8*Math.random()+2  //2到10之间的某一个数    
Math.round(Math.random()*10)  //四舍五人
Math.ceil(Math.random()*10)  //取值
Math.floor(Math.random()*10) //舍去
Math.min(1,10) 取最小值
Math.max(1,10) 取最大值
Math.pow(2,4) 指数运算
Math.sqrt(9); 平方根
</code></pre><p>5.Date类相关,不一个new则为当前日期</p>
<pre><code>new Date(2008,0,1)    //月从0开始计算 Tue Jan 01 2008 00:00:00 GMT+0800 (CST)
dateTest.setMonth(2) //设置为3月
dateTest.getMonth() // 2
Date.parse(&quot;Jan 1,2009&quot;) //转为时间戳
ateTest.getDay() //获取星期几 0为每星期的第一天
</code></pre><p>6.正则表达式</p>
<pre><code>var re = new RegExp(&quot;j.*t&quot;,&quot;gmi&quot;);    
</code></pre><p>修饰符    描述,一旦设置不能更改<br>i    执行对大小写不敏感的匹配。默认false<br>g    执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。默认false<br>m    执行多行匹配 默认false</p>
<pre><code>var s = new String(&quot;HelloJavaScriptWorld&quot;);
s.match(/a/); //匹配字符串
s.search(/j.*a/i); //匹配字符串索引位置
s.replace(/[A-Z]/g,&apos;&apos;); //替换为空字符串
</code></pre><p>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。()为分组匹配分组的第一组;这些函数还可以匹配普通字符串;</p>
<pre><code>var email = &quot;stoyan@phpied.com&quot;;
var username= email.replace(/(.*)@.*/,&quot;$1&quot;);

var callback = function(){ 
glob = arguments;
return arguments[1] +&quot; at&quot; + arguments[2] + &quot; dot &quot; + arguments[3];
}
&quot;stoyan@phpied.com&quot;.replace(/(.*)@(.*)\.(.*)/, callback); //分组
&quot;stoyan atphpied dot com&quot; 

var csv = &quot;one, two, three, four&quot;;
csv.split(/\s*,\s*/); //空格匹配;
</code></pre><p>7.error错误捕捉,,自定义错误对象,</p>
<pre><code>try {
idont();
} catch (e) {
alert(e.name + &apos;: &apos; + e.message);
}    

try {
var total = mybeE();
if(total === 0) {
throw new Error(&quot;division by zero&quot;);
} else {
alert(50/total);
}
} catch (e){
alert(e.name + &apos;: &apos; + e.message);
}
</code></pre><h3 id="重要的属性-原型"><a href="#重要的属性-原型" class="headerlink" title="重要的属性-原型"></a>重要的属性-原型</h3><p>1.原型类似于父类的东西,gadget的父类gadget.prototype,可以增加属性,可以修改原型,然后影响原来的对象</p>
<pre><code>function gadget (name ,color) {
this.name = name;
this.color = color;
this.whatAreYou = function () {
return &quot;i am a &quot; + this.color + &quot; &quot; +this.name;
}
}            

gadget.prototype = {
price : 100,
rating: 3,
getInfo :function() {
return &quot;rating&quot; + this.rating + &quot;  price&quot; + this.price;
}
}
</code></pre><p>2.对象自身属性没有找到指定的属性,会去原型里面继续查找,如果相同,以对象的属性为准;打印属性;</p>
<pre><code>for (var prop in newToy) {
 console.log(prop + &quot; = &quot; + newToy[prop]);
</code></pre><p>newToy.hasOwnProperty属于自身的属性</p>
<pre><code> for (var prop in newToy) {
if(newToy.hasOwnProperty(prop)){
console.log(prop + &quot; = &quot; + newToy[prop]);
}}    
</code></pre><p>newToy.propertyIsEnumerable自身属性为true,原型中的为false;<br>monke是对象george的原型;</p>
<pre><code>monkey.isPrototypeOf(george);
</code></pre><p>3.prototype和<em>proto</em>属性不是等价的,prototype改变并不会影响到<em>proto</em></p>
<pre><code>monkey.test = 1;
developer.test; //修改monkey的属性,修改developer内容;
</code></pre><p>4.扩展内建函数常用Array,相当于iOS分类</p>
<pre><code>Array.prototype.inArray = function (needle) {
for (var i = 0,len = this.length;i&lt; len;i++){
if (this[i] === needle) {
return true;
}
}
}    
</code></pre><p>5.判断函数是否可以使用,如果想添加一个属性或者方法最好看是不是已经存在其中;</p>
<pre><code>if (!String.prototype.reverse) {
alert(&quot;1111&quot;);
}
</code></pre><p>6.当我们重写某对象的prototype时候,重置相应的constructor是一个好习惯;        </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;常见类&quot;&gt;&lt;a href=&quot;#常见类&quot; class=&quot;headerlink&quot; title=&quot;常见类&quot;&gt;&lt;/a&gt;常见类&lt;/h3&gt;&lt;p&gt;1.Boolean 验证类的布尔值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Boolean(&amp;quot;&amp;quot;)  false
Bool
    
    </summary>
    
      <category term="js" scheme="https://sukeyang.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>js基本用法(一)</title>
    <link href="https://sukeyang.github.io/2017/02/10/xuejs1/"/>
    <id>https://sukeyang.github.io/2017/02/10/xuejs1/</id>
    <published>2017-02-10T10:12:00.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>1.不用new的话,this会变成全局变量</p>
<pre><code>function Hero(name) { this.name = name ;};
var h1 = Hero(&quot;ceshi&quot;);
</code></pre><p>2.大小写严格<br>3.Infinity 超出处理范围的数值 1e309,<br>4.NaN依旧是number,typeof NaN可以查看,特殊数字<br>5.数字字符串做运算,会当成数字类型使用,转换失败就是NaN,偷懒做法是1*s转换成数字,</p>
<pre><code>var s = &quot;1&quot;;s = 3*s
var s = &quot;100&quot;;s = 1*s
var s = &quot;1avbc&quot;;s = 3*s
</code></pre><p>加法不适用</p>
<pre><code>var s = &quot;1&quot;;s += 3    
</code></pre><p>6.加法是用来把数字转成字符串,取巧的方式</p>
<pre><code>var s = &quot;1&quot;;s += 3    
</code></pre><p>7.空字符串””,null,undefined,0,NaN,false都是false<br>8.===等价运算</p>
<pre><code>1 === &apos;1&apos;    false
</code></pre><p>!== 不能价运算     </p>
<pre><code>NaN == NaN  false
</code></pre><p>9.undefined为不存在或者未经过赋值的变量,和nul在转换基本类型时有区别</p>
<pre><code>&quot;&quot; + null        &quot;null&quot;
&quot;&quot; + undefined   undefined
</code></pre><h3 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h3><p>1.数组操作</p>
<pre><code>delete a[1]    
length属性为太长自动填充    undefined
a.push(&quot;last&quot;)     //添加到最后
  a.pop()   //删掉最后
  a.sort()  //排序
  a.join(&quot;is &quot;)  //连接&quot;1is is is &quot;
  a.slice(1,2)  //查看
  a.splice(1,2,100,200,300) //删掉并添加新的[1, 100, 200, 300, undefined × 1]
</code></pre><p>2.判断数组存在</p>
<pre><code>if(typeof somevar == &quot;undefined&quot;) {result = &quot;yes&quot;};
&quot;yes&quot;    
</code></pre><p>3.常用函数parseInt() 默认十进制,看后面参数的开头”0x”,”0337”应该避免为8进制<!--并未在google浏览器下出现错误--></p>
<pre><code>parseInt(&quot;123abc&quot;) 123
parseInt(&quot;FF&quot;,16)  255
parseInt(&quot;0x34&quot;)
</code></pre><p>4.isNaN函数其实等同于回答了这样一个问题：这个值被强制转换成数值时会不会返回IEEE-754​中所谓的”不是数值“（not a number）。</p>
<pre><code>isNaN({}); // true    
isNaN(&quot;37&quot;);      // false: 可以被转换成数值37
</code></pre><p>5.你可以用这个方法来判定一个数字是否是有限数字。isFinite 方法检测它参数的数值。如果参数是 NaN，正无穷大或者负无穷大，会返回false，其他返回 true。</p>
<pre><code>isFinite(2e64);      // true
isFinite(Infinity);  // false
</code></pre><p>6.encodeURI() 是对统一资源标识符（URI）进行编码的方法。它使用1到4个转义序列来表示每个字符的UTF-8编码<br>encodeURIComponent()是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。</p>
<pre><code>encodeURI()
encodeURIComponent()
</code></pre><p>7.eval(string) 一个字符串表示了一个JavaScript表达式，声明， 或声明的序列。表达式可以包括变量和已存在对象的属性。</p>
<pre><code>eval(string)
</code></pre><p>8.总是使用var 来声明全局变量<br>9.f()执行之后,n()为全局变量,或者返回给全局空间声明,保留了作用域内参数b的值,记录自身在的环境和相关的参数.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">var</span> n;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">var</span>  b  = <span class="string">"b"</span>;</div><div class="line">	n = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> b;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>留住的是指针,用get,set函数闭包建立私有变量,迭代器.</p>
<h3 id="对象操作"><a href="#对象操作" class="headerlink" title="对象操作"></a>对象操作</h3><p>1.属性名字一般不加引号,除非:为js保留字,含有特殊字符,用数字开头的属性<br>2.属性可以是函数,函数是一种数据类型.<br>3.属性不能用.进行调用和(1)条件一致<br>4.this标识当前对象.<br>5.不用new 生成对象 this引用的是window全局对象.<br>6.对象有一个constructor 构造器属性<br>7.h12 instanceof Hero 是否有某一个对象初始化来的<br>8.控制输出数据的内容,函数也是对象也是一种数据类型</p>
<pre><code>console.info(h12)
console.log() 
console.error()
</code></pre><p>9.一些方法,o会自动调用toString</p>
<pre><code>toString
&quot;an object&quot; + o    
</code></pre><p>10.valueOf()返回对象本身.</p>
<pre><code>o.valueOf() === o    
</code></pre><p>11.尽量避免使用Function 构造器函数,权限太大</p>
<pre><code>var sum = new Function(&quot;a,b&quot;,&quot;return a + b&quot;)     sum.length //参数个数 2
</code></pre><p>12.caller返回调用函数</p>
<pre><code>function A(){return A.caller;}
function B(){return A();}
</code></pre><p>13.prototype为构造函数的内容,该属性为一个对象</p>
<pre><code>prototype        
</code></pre><p>14.some_obj.say.call(my_obj,’myobje’)为让my_obj 执行say 函数,并且传入参数.本质是修改了this的值,<br>some_obj.say.apply(my_obj,[‘ceshi’])为apply 参数为一个数组形式的<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> some_obj = &#123;</div><div class="line">	name:<span class="string">'nanne'</span>,</div><div class="line">	say:<span class="function"><span class="keyword">function</span><span class="params">(who)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">'haya '</span> + who + <span class="string">', i am a '</span> +<span class="keyword">this</span>.name;	</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">some_obj.say.apply(my_obj,[<span class="string">'ceshi'</span>])</div></pre></td></tr></table></figure></p>
<p>15.arguments.callee属性为当前的函数对象,arguments数组,没有sort和slice方法</p>
<pre><code>    (
function (count) {
    if(count &lt; 5){
    alert(count);
    arguments.callee(++count);    
}
}
)(1)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h3&gt;&lt;p&gt;1.不用new的话,this会变成全局变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function Hero(name) { thi
    
    </summary>
    
      <category term="js" scheme="https://sukeyang.github.io/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>2016总结</title>
    <link href="https://sukeyang.github.io/2017/02/06/2016%E6%80%BB%E7%BB%93/"/>
    <id>https://sukeyang.github.io/2017/02/06/2016总结/</id>
    <published>2017-02-06T04:00:58.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><p>减肥5kg,少吃肉类,鱼类<br>看电影5次 电影院<br>看书5本 包括js 还有es6,微信小程序等内容<br>微信个人公众号<br><a id="more"></a><br>后台开发初识<br>出去旅游3次,包括北京周边<br>开通自己的博客或者简书写博客10篇内容<br>听书 鬼吹灯全集 不算书</p>
<h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>keynote 的制作等<br>做分享 3次 ,<br>工资提升<br>提升用户到2k 活跃到2w 更新内容,10次,每月都的多100人.<br>页面的优化</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生活上&quot;&gt;&lt;a href=&quot;#生活上&quot; class=&quot;headerlink&quot; title=&quot;生活上&quot;&gt;&lt;/a&gt;生活上&lt;/h2&gt;&lt;p&gt;减肥5kg,少吃肉类,鱼类&lt;br&gt;看电影5次 电影院&lt;br&gt;看书5本 包括js 还有es6,微信小程序等内容&lt;br&gt;微信个人公众号&lt;br&gt;
    
    </summary>
    
      <category term="技巧" scheme="https://sukeyang.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Sublime Text 进行Markdown 编辑</title>
    <link href="https://sukeyang.github.io/2016/12/18/%E4%BD%BF%E7%94%A8SublimeText%E8%BF%9B%E8%A1%8CMarkdown%E7%BC%96%E8%BE%91/"/>
    <id>https://sukeyang.github.io/2016/12/18/使用SublimeText进行Markdown编辑/</id>
    <published>2016-12-18T07:36:25.000Z</published>
    <updated>2017-02-20T13:17:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装包管理器"><a href="#安装包管理器" class="headerlink" title="安装包管理器"></a>安装包管理器</h2><p>同时按下ctrl+”`”,将会在窗口底部出现一个小控制台，下面代码粘贴到控制台的编辑栏里：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); <span class="built_in">open</span>(os.path.join(ipp, pf), <span class="string">'wb'</span>).<span class="built_in">write</span>(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</div></pre></td></tr></table></figure>
<p>安装不上的问题，<a href="https://packagecontrol.io/installation" target="_blank" rel="external">看官方办法</a></p>
<h2 id="安装我们要用到的插件"><a href="#安装我们要用到的插件" class="headerlink" title="安装我们要用到的插件"></a>安装我们要用到的插件</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Markdown </span>Editing // <span class="keyword">Markdown编辑和语法高亮支持 </span></div><div class="line"><span class="keyword">Markdown </span>Preview// <span class="keyword">Markdown导出html预览支持</span></div></pre></td></tr></table></figure>
<h2 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h2><p>1.在设置里面Sublime Text – &gt;preference–&gt; key bunding user     输入</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;<span class="attr">"keys"</span>: [<span class="string">"alt+r"</span>], <span class="attr">"command"</span>: <span class="string">"markdown_preview"</span>, <span class="attr">"args"</span>: &#123; <span class="attr">"target"</span>: <span class="string">"browser"</span>&#125;&#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<p>然后按住alt + r ，预览你编辑的文件吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装包管理器&quot;&gt;&lt;a href=&quot;#安装包管理器&quot; class=&quot;headerlink&quot; title=&quot;安装包管理器&quot;&gt;&lt;/a&gt;安装包管理器&lt;/h2&gt;&lt;p&gt;同时按下ctrl+”`”,将会在窗口底部出现一个小控制台，下面代码粘贴到控制台的编辑栏里：&lt;/p&gt;
&lt;fig
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>ReactNative错误收集问题</title>
    <link href="https://sukeyang.github.io/2016/12/15/ReactNative%E9%94%99%E8%AF%AF%E6%94%B6%E9%9B%86%E9%97%AE%E9%A2%98/"/>
    <id>https://sukeyang.github.io/2016/12/15/ReactNative错误收集问题/</id>
    <published>2016-12-15T02:47:26.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>##错误一:Unable to resolve module image!<br>方法:    在 Xcode 下 Images.xcassets 里面明确的有这个图片。</p>
<p>##错误二:低版本兼容,Log类接口修改, 添加 RCTLogSource source 即可.</p>
<pre><code>RCTSetLogFunction(^(RCTLogLevel level, RCTLogSource source, NSString *fileName, NSNumber *lineNumber, NSString *message)
</code></pre><p>##错误三:RCTSRWebSocket.m报错,代码在下面</p>
<pre><code>SecRandomCopyBytes(kSecRandomDefault, sizeof(uint32_t), (uint8_t *)mask_key);
</code></pre><p>修改为:</p>
<pre><code>(void)SecRandomCopyBytes(kSecRandomDefault, sizeof(uint32_t), (uint8_t *)mask_key);    
</code></pre><p>##错误四: Seem you’re trying to access ‘ReactNative.createClass’ from the ‘react-native package;</p>
<pre><code>var React = require(&apos;react&apos;);
var component = React.createClass();
</code></pre><p>RN升级导致的问题,官方<a href="http://bbs.reactnative.cn/topic/1857/seems-you-re-trying-to-access-reactnative-createclass/7" target="_blank" rel="external">解决</a></p>
<p>##错误五:重新安装sdk,react@15.3.1是sdk版本</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">watchman watch-del-all</div><div class="line">rm -rf node_modules</div><div class="line">npm <span class="keyword">install</span> react@<span class="number">15.3</span><span class="number">.1</span> <span class="comment">--save</span></div><div class="line">npm <span class="keyword">install</span></div><div class="line">rm -fr $TMPDIR/react-*</div><div class="line">npm <span class="keyword">start</span> <span class="comment">-- --reset-cache	</span></div><div class="line"><span class="string">``</span><span class="string">`		</span></div><div class="line">##错误六:错误是下面提示</div><div class="line">方法:other flag 添加标识 -lc++</div></pre></td></tr></table></figure>
<p>Undefined symbols for architecture x86_64:<br>  “std::<strong>1::</strong>next_prime(unsigned long)”, referenced from:<br>      std::<strong>1::</strong>hash_table<std::__1::__hash_value_type<unsigned long,="" unsigned="" long="">, std::<strong>1::</strong>unordered_map_hasher<unsigned long,="" std::__1::__hash_value_type<unsigned="" unsigned="" long="">, std::<strong>1::hash<unsigned long="">, true&gt;, std::</unsigned></strong>1::<strong>unordered_map_equal&lt;unsigned long, std::</strong>1::<strong>hash_value_type<unsigned long,="" unsigned="" long="">, std::</unsigned></strong>1::equal_to<unsigned long="">, true&gt;, std::<strong>1::allocator&lt;std::</strong>1::<strong>hash_value_type<unsigned long,="" unsigned="" long=""> &gt; &gt;::rehash(unsigned long) in libReact.a(RCTJSCExecutor.o)<br>  “std::</unsigned></strong>1::mutex::lock()”, referenced from:<br>      -[RCTModuleData setUpInstanceAndBridge] in libReact.a(RCTModuleData.o)<br>  “std::<strong>1::mutex::unlock()”, referenced from:<br>      -[RCTModuleData setUpInstanceAndBridge] in libReact.a(RCTModuleData.o)<br>  “std::</strong>1::mutex::~mutex()”, referenced from:<br>      -[RCTModuleData .cxx_destruct] in libReact.a(RCTModuleData.o)<br>  “std::terminate()”, referenced from:<br>      <strong>_clang_call_terminate in libReact.a(RCTJSCExecutor.o)<br>  “operator delete<a href="void*"></a>“, referenced from:<br>      -[RCTJSCExecutor dealloc] in libReact.a(RCTJSCExecutor.o)<br>      executeRandomAccessModule(RCTJSCExecutor*, unsigned int, unsigned long, unsigned long) in libReact.a(RCTJSCExecutor.o)<br>      readRAMBundle(std::</strong>1::unique_ptr<__sfile, int="" (*)(__sfile*)="">, RandomAccessBundleData&amp;) in libReact.a(RCTJSCExecutor.o)<br>…..<br>…..<br>  “<strong>_cxa_begin<em>catch”, referenced from:
      </em></strong>clang_call_terminate in libReact.a(RCTJSCExecutor.o)<br>  “___gxx_personality_v0”, referenced from:<br>      -[RCTJavaScriptContext initWithJSContext:onThread:] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJavaScriptContext init] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJavaScriptContext invalidate] in libReact.a(RCTJSCExecutor.o)<br>      +[RCTJSCExecutor runRunLoopThread] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJSCExecutor setBridge:] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJSCExecutor init] in libReact.a(RCTJSCExecutor.o)<br>      -[RCTJSCExecutor initWithUseCustomJSCLibrary:] in libReact.a(RCTJSCExecutor.o)<br>      …<br>ld: symbol(s) not found for architecture x86_64<br>clang: error: linker command failed with exit code 1 (use -v to see invocation)<br>```</__sfile,></unsigned></unsigned></std::__1::__hash_value_type<unsigned></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##错误一:Unable to resolve module image!&lt;br&gt;方法:    在 Xcode 下 Images.xcassets 里面明确的有这个图片。&lt;/p&gt;
&lt;p&gt;##错误二:低版本兼容,Log类接口修改, 添加 RCTLogSource source
    
    </summary>
    
      <category term="BFE" scheme="https://sukeyang.github.io/categories/BFE/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS 9 - Keyboard 出现在 UIAlertView 不消失</title>
    <link href="https://sukeyang.github.io/2016/10/01/UIAlertView%E4%B8%8D%E6%B6%88%E5%A4%B1/"/>
    <id>https://sukeyang.github.io/2016/10/01/UIAlertView不消失/</id>
    <published>2016-10-01T09:56:13.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>今天遇见一个奇怪的bug,当我的UIAlertView 消失的时候键盘弹出来了,这个只出现在第一次安装的时候<br>万能的<a href="http://stackoverflow.com/questions/32744209/ios-9-keyboard-pops-up-after-uialertview-dismissed" target="_blank" rel="external">stackoverflow</a>上面有这个问题的一些解决方案:</strong></p>
<p>1.使用新的api,UIAlertController</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">UIAlertController *alertController = [UIAlertController <span class="string">alertControllerWithTitle:</span>@<span class="string">"Alert Title!"</span> <span class="string">message:</span>@<span class="string">"This is an alert message."</span> <span class="string">preferredStyle:</span>UIAlertControllerStyleAlert]; </div><div class="line">UIAlertAction *ok = [UIAlertAction <span class="string">actionWithTitle:</span>@<span class="string">"OK"</span> <span class="string">style:</span>UIAlertActionStyleDefault <span class="string">handler:</span>nil]; </div><div class="line">[alertController <span class="string">addAction:</span>ok];</div><div class="line">[self <span class="string">presentViewController:</span>alertController <span class="string">animated:</span>NO <span class="string">completion:</span>nil];</div></pre></td></tr></table></figure>
<p>2.另外一个方法就是延迟调用一下alertView.</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@weakify</span>(self);</div><div class="line"><span class="selector-tag">dispatch_after</span>(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0.6</span> *NSEC_PER_SEC)),dispatch_get_main_queue(), ^&#123;</div><div class="line">	<span class="variable">@strongify</span>(self);</div><div class="line">	<span class="selector-attr">[self loadUpdateAPI]</span>; </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>3.另外一种注销键盘</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] sendAction:<span class="keyword">@selector</span>(resignFirstResponder) to:<span class="literal">nil</span> from:<span class="literal">nil</span> forEvent:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<p><strong> 出现的原因</strong><br>可能是键盘状态没有完全被收回,导致出现的</p>
<p><strong>如果有更好的方案可以告诉我</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;今天遇见一个奇怪的bug,当我的UIAlertView 消失的时候键盘弹出来了,这个只出现在第一次安装的时候&lt;br&gt;万能的&lt;a href=&quot;http://stackoverflow.com/questions/32744209/ios-9-keyboard-
    
    </summary>
    
      <category term="ios" scheme="https://sukeyang.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>Xcode中Link Binary With Libraries Status Required or Optional</title>
    <link href="https://sukeyang.github.io/2016/09/06/Link%20Binary%20With/"/>
    <id>https://sukeyang.github.io/2016/09/06/Link Binary With/</id>
    <published>2016-09-06T04:00:58.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional"><a href="#Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional" class="headerlink" title="Xcode中Link Binary With Libraries Status Required or Optional"></a>Xcode中Link Binary With Libraries Status Required or Optional</h2><p>Libraries and frameworks are designated as Required by default, but you can change this designation to Optional. Required libraries must be present on the host computer for the product to load. Optional libraries do not have to be present for the product to load. A Required framework will always be loaded into memory, but an Optional framework will be loaded only if needed. The initial load of the application will be faster if a large library that is never needed is designated as Optional.<br><a id="more"></a></p>
<h5 id="内容-在指定设备上根据系统版本选择加载framework-状态-否则会出现崩溃-常见-需要-Optional-否则会在低版本系统ios7下崩溃"><a href="#内容-在指定设备上根据系统版本选择加载framework-状态-否则会出现崩溃-常见-需要-Optional-否则会在低版本系统ios7下崩溃" class="headerlink" title="内容:在指定设备上根据系统版本选择加载framework 状态,否则会出现崩溃.常见 需要 Optional,否则会在低版本系统ios7下崩溃."></a>内容:在指定设备上根据系统版本选择加载framework 状态,否则会出现崩溃.常见 <notficationcenter.framework>需要 Optional,否则会在低版本系统ios7下崩溃.</notficationcenter.framework></h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional&quot;&gt;&lt;a href=&quot;#Xcode中Link-Binary-With-Libraries-Status-Required-or-Optional&quot; class=&quot;headerlink&quot; title=&quot;Xcode中Link Binary With Libraries Status Required or Optional&quot;&gt;&lt;/a&gt;Xcode中Link Binary With Libraries Status Required or Optional&lt;/h2&gt;&lt;p&gt;Libraries and frameworks are designated as Required by default, but you can change this designation to Optional. Required libraries must be present on the host computer for the product to load. Optional libraries do not have to be present for the product to load. A Required framework will always be loaded into memory, but an Optional framework will be loaded only if needed. The initial load of the application will be faster if a large library that is never needed is designated as Optional.&lt;br&gt;
    
    </summary>
    
      <category term="ios" scheme="https://sukeyang.github.io/categories/ios/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS CocoaPods安装使用错误记录</title>
    <link href="https://sukeyang.github.io/2016/08/02/CocoaPods%E5%AE%89%E8%A3%85/"/>
    <id>https://sukeyang.github.io/2016/08/02/CocoaPods安装/</id>
    <published>2016-08-02T08:40:33.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-gem-install-cocoapods"><a href="#1-gem-install-cocoapods" class="headerlink" title="1.gem install cocoapods"></a>1.gem install cocoapods</h1><pre><code>ERROR:  While executing gem ... (Errno::EPERM)
Operation not permitted - /usr/bin/pod
</code></pre><p>  用下面命名安装<br>  <a id="more"></a><br>    sudo gem install -n /usr/local/bin cocoapods</p>
<h1 id="2-更换更新数据源国内镜像-每天都更新code-net"><a href="#2-更换更新数据源国内镜像-每天都更新code-net" class="headerlink" title="2.更换更新数据源国内镜像,每天都更新code.net"></a>2.更换更新数据源国内镜像,每天都更新<a href="https://git.coding.net/CocoaPods/Specs.git" target="_blank" rel="external">code.net</a></h1><pre><code>pod repo remove master
pod repo add master https://git.coding.net/CocoaPods/Specs.git    
pod setup
</code></pre><h1 id="3-常用更新安装命名-不进行本地库更新"><a href="#3-常用更新安装命名-不进行本地库更新" class="headerlink" title="3.常用更新安装命名,不进行本地库更新"></a>3.常用更新安装命名,不进行本地库更新</h1><p>更新</p>
<pre><code>pod update --verbose --no-repo-update 
</code></pre><p>安装</p>
<pre><code>pod install --verbose --no-repo-update
</code></pre><h1 id="4-安装和卸载pod"><a href="#4-安装和卸载pod" class="headerlink" title="4 安装和卸载pod"></a>4 安装和卸载pod</h1><pre><code>sudo gem uninstall cocoapods  卸载
sudo gem install cocoapods    指定版本追加(-v 0.39) 安装
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-gem-install-cocoapods&quot;&gt;&lt;a href=&quot;#1-gem-install-cocoapods&quot; class=&quot;headerlink&quot; title=&quot;1.gem install cocoapods&quot;&gt;&lt;/a&gt;1.gem install cocoapods&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;ERROR:  While executing gem ... (Errno::EPERM)
Operation not permitted - /usr/bin/pod
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  用下面命名安装&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
      <category term="tools" scheme="https://sukeyang.github.io/tags/tools/"/>
    
      <category term="效率" scheme="https://sukeyang.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>git使用技巧</title>
    <link href="https://sukeyang.github.io/2016/07/20/git%E4%BD%BF%E7%94%A8/"/>
    <id>https://sukeyang.github.io/2016/07/20/git使用/</id>
    <published>2016-07-20T01:55:28.000Z</published>
    <updated>2017-02-20T14:11:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssh-key的作用"><a href="#ssh-key的作用" class="headerlink" title="ssh-key的作用"></a>ssh-key的作用</h2><p>我们使用ssh登录服务器时，一般常见的会使用用户名/密码方式登录，<br>也可以使用ssh key实行免密码登录，一般现在这种方式被Git服务器使用的比较多。</p>
<h2 id="解决本地多个ssh-key的配置"><a href="#解决本地多个ssh-key的配置" class="headerlink" title="解决本地多个ssh-key的配置"></a>解决本地多个ssh-key的配置</h2><p>1.生成不同的密钥,ssh会根据登陆不同的域来读取相应的私钥文件</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa<span class="selector-class">.work</span> -C <span class="string">"Key for Work"</span>  </div><div class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa<span class="selector-class">.github</span> -C <span class="string">"Key for GitHub"</span></div></pre></td></tr></table></figure>
<p>在 <code>~/.ssh/config</code> 目录内修改文件config</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Host *<span class="selector-class">.workdomain</span><span class="selector-class">.com</span>   </div><div class="line">  </div><div class="line">    IdentityFile ~/.ssh/id_rsa<span class="selector-class">.work</span>  </div><div class="line">    User lee  </div><div class="line">   </div><div class="line">Host github<span class="selector-class">.com</span>  </div><div class="line">    IdentityFile ~/.ssh/id_rsa<span class="selector-class">.github</span>  </div><div class="line">    User git</div></pre></td></tr></table></figure>
<p>用下面的命令测试一下</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ssh</span> <span class="selector-tag">-T</span> <span class="selector-tag">git</span>@<span class="keyword">github</span>.<span class="keyword">com</span></div></pre></td></tr></table></figure>
<p>返回成功</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi sukeyang! You<span class="symbol">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>
<p>1.提示 WARNING: UNPROTECTED PRIVATE KEY FILE!  </p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@</span></div><div class="line">@         WARNING: UNPROTECTED PRIVATE <span class="built_in">KEY</span> FILE!          <span class="comment">@</span></div><div class="line">@<span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span><span class="comment">@@</span></div><div class="line">Permissions <span class="number">0644</span> <span class="keyword">for</span> '/Users/yangshuo/.ssh/winid_rsa' are too <span class="keyword">open</span>.</div><div class="line">It is required that your private <span class="built_in">key</span> files are <span class="keyword">NOT</span> accessible by others.</div><div class="line">This private <span class="built_in">key</span> will be ignored.</div></pre></td></tr></table></figure>
<p>解决办法：在命令行输入chmod 700 id_rsa.github即可。这里“id_rsa.githu”就是warning里给出的密钥文件名。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ssh-key的作用&quot;&gt;&lt;a href=&quot;#ssh-key的作用&quot; class=&quot;headerlink&quot; title=&quot;ssh-key的作用&quot;&gt;&lt;/a&gt;ssh-key的作用&lt;/h2&gt;&lt;p&gt;我们使用ssh登录服务器时，一般常见的会使用用户名/密码方式登录，&lt;br&gt;也
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>升级iOS10后，部分App更新之后无法联网怎么办？</title>
    <link href="https://sukeyang.github.io/2016/07/03/%E9%83%A8%E5%88%86App%E6%9B%B4%E6%96%B0%E6%97%A0%E6%B3%95%E8%81%94%E7%BD%91/"/>
    <id>https://sukeyang.github.io/2016/07/03/部分App更新无法联网/</id>
    <published>2016-07-03T04:00:58.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>苹果在iOS10中，增加了“使用无线局域网与蜂窝移动应用”的功能。有些App升级后默认关闭了数据使用，导致无法联网。</strong></p>
<p>1.进入“设置-蜂窝移动网络-使用无线局域网与蜂窝移动的应用”（或者“设置-无线局域网-使用无线局域网与蜂窝移动的应用”），找到无法联网的App，允许其“使用数据”即可。</p>
<p>2.另外还有一种Bug情况：在该列表中找不到这款无法联网的App。<br><a id="more"></a></p>
<ul>
<li><p>此时，在列表中任意选择一个App，先关闭“无线局域网与蜂窝移动数据“，即不允许其使用数据。然后再重新打开允许使用“无线局域网与蜂窝移动数据”。</p>
</li>
<li><p>返回桌面，再次打开刚才无法联网的App，这时候系统会提示“是否允许App使用数据网络”，点击“允许”，App即可顺利联网使用。</p>
</li>
</ul>
<p>3.重启手机,进入app,会进行提示!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;苹果在iOS10中，增加了“使用无线局域网与蜂窝移动应用”的功能。有些App升级后默认关闭了数据使用，导致无法联网。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.进入“设置-蜂窝移动网络-使用无线局域网与蜂窝移动的应用”（或者“设置-无线局域网-使用无线局域网与蜂窝移动的应用”），找到无法联网的App，允许其“使用数据”即可。&lt;/p&gt;
&lt;p&gt;2.另外还有一种Bug情况：在该列表中找不到这款无法联网的App。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>GitHub + Hexo 搭建博客总结(二)</title>
    <link href="https://sukeyang.github.io/2016/06/07/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA2/"/>
    <id>https://sukeyang.github.io/2016/06/07/博客搭建2/</id>
    <published>2016-06-07T09:34:35.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-创建分类"><a href="#1-创建分类" class="headerlink" title="1.创建分类"></a>1.创建分类</h3><p>建立分类文件夹</p>
<pre><code>hexo new page categories
</code></pre><p>xxx.md 头部写成这样</p>
<pre><code>title: GitHub + Hexo 搭建博客总结(二)
date: 2017-02-07 17:34:35
tags:
categories: 
   tools    
</code></pre><h3 id="2-底部统计"><a href="#2-底部统计" class="headerlink" title="2.底部统计"></a>2.底部统计</h3><p>安装脚本（必选）,<a href="http://wangcaiyong.com/2015/06/26/busuanzi/" target="_blank" rel="external">参考链接</a><br>打开themes/你的主题/layout/_partial/footer.pejs添加如下脚本即可。</p>
<pre><code>&lt;script async src=&quot;https://dn-lbstatics.qbox.me/    busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;
&lt;/script&gt;
</code></pre><h3 id="3-为Hexo-添加-Swiftype-站内搜索"><a href="#3-为Hexo-添加-Swiftype-站内搜索" class="headerlink" title="3.为Hexo 添加 Swiftype 站内搜索"></a>3.为Hexo 添加 Swiftype 站内搜索</h3><p>1.去 Swiftype<a href="https://swiftype.com/" target="_blank" rel="external">官网</a>注册好账号，然后点击 Create Engine，输入网址并填好名称，配置好后 Swiftype 会自动开始抓取网站数据，点击 Manage 下面的 Content ，就能看到抓取到的网站数据。<br>2.打开 Hexo 主题配置，以 jacman 为例，打开 jacman 目录下的 _config.yml 文件，在末尾添加</p>
<pre><code>swift_search:     ## https://swiftype.com/
enable: true
id: ## 这里填写前面记下的 Swiftype id
</code></pre><p>3.替换文件,在到 jacman\layout\/_partial 目录，打开 header.ejs 这个文件</p>
<figure class="highlight erb"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span></span></span><span class="ruby"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(theme.baidu_search.enable)&#123; </span><span class="xml"><span class="tag">%&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"search"</span> <span class="attr">action</span>=<span class="string">"&lt;%-</span></span><span class="ruby"> theme.baidu_search.site </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"s"</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>= &lt;%=</span><span class="ruby"> theme.baidu_search.id </span><span class="xml"><span class="tag">%&gt;</span> &gt;<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">placeholder</span>=<span class="string">"&lt;%=</span></span></span><span class="ruby"> _<span class="number">_</span>(<span class="string">'search'</span>) </span><span class="xml"><span class="tag"><span class="string">%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这段代码后边添加</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span>(theme.swift_search.enable)&#123; %&gt;</div><div class="line">&lt;<span class="keyword">form</span> <span class="keyword">class</span>=<span class="string">"search"</span> action=<span class="string">"&lt;%- config.root %&gt;search/index.html"</span> method=<span class="string">"get"</span> accept-charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;<span class="keyword">label</span>&gt;<span class="keyword">Search</span>&lt;/<span class="keyword">label</span>&gt;</div><div class="line">&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"text"</span> id=<span class="string">"search"</span> <span class="keyword">class</span>=<span class="string">"st-default-search-input"</span> maxlength=<span class="string">"20"</span> placeholder=<span class="string">"Search"</span> /&gt;</div><div class="line">&lt;/<span class="keyword">form</span>&gt;</div></pre></td></tr></table></figure>
<p>最后在文件最后一个前添加</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">(<span class="name">function</span>(<span class="name">w</span>,d,<span class="literal">t</span>,u,n,s,e)&#123;w['SwiftypeObject']=n<span class="comment">;w[n]=w[n]||function()&#123;</span></div><div class="line">(<span class="name">w</span>[n].q=w[n].q||[]).push(<span class="name">arguments</span>)<span class="comment">;&#125;;s=d.createElement(t);</span></div><div class="line">e=d.getElementsByTagName(<span class="name">t</span>)[<span class="number">0</span>]<span class="comment">;s.async=1;s.src=u;e.parentNode.insertBefore(s,e);</span></div><div class="line">&#125;)(<span class="name">window</span>,document,'script','//s.swiftypecdn.com/install/v2/st.js','_st')<span class="comment">;</span></div><div class="line">_st('install','Zo1mzEpQeR6Xjr3hz4jd','<span class="number">2.0</span>.<span class="number">0</span>')<span class="comment">;</span></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h3 id="4-图片处理"><a href="#4-图片处理" class="headerlink" title="4.图片处理"></a>4.图片处理</h3><p>用七牛为 Hexo 存储图片<a href="http://clarkky.org/post/Hexo-Qiniu-Image-CDN/" target="_blank" rel="external">链接</a></p>
<h3 id="5-开启统计"><a href="#5-开启统计" class="headerlink" title="5.开启统计"></a>5.开启统计</h3><p>hexo安装统计插件,<a href="http://www.cnblogs.com/tengj/p/5365434.html" target="_blank" rel="external">链接</a></p>
<h3 id="6-首页文章展示摘要"><a href="#6-首页文章展示摘要" class="headerlink" title="6.首页文章展示摘要"></a>6.首页文章展示摘要</h3><p>该主题首页文章列表默认是全部展开，感觉不好，我关闭掉了，只展示少量摘要。<br>修改\themes\jacman下面_config.yml中的expand改成false即可</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">index:</span></div><div class="line"><span class="attr">  expand:</span> <span class="literal">false</span>           <span class="comment">## default is unexpanding,so you can only see the short description of each post.</span></div><div class="line"><span class="attr">  excerpt_link:</span> Read More</div></pre></td></tr></table></figure>
<h3 id="7-配置模板文章"><a href="#7-配置模板文章" class="headerlink" title="7.配置模板文章"></a>7.配置模板文章</h3><p>我们可以修改根目录下\scaffolds\post.md文件，配置好基本的信息，比如：</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">title:</span> GitHub + Hexo 搭建博客总结(二)</div><div class="line"><span class="symbol">date:</span> <span class="number">1465292075000</span></div><div class="line"><span class="symbol">categories:</span> </div><div class="line">  tools</div></pre></td></tr></table></figure>
<h3 id="8-代码显示不全等问题用下面方式避免-官网说明-链接"><a href="#8-代码显示不全等问题用下面方式避免-官网说明-链接" class="headerlink" title="8.代码显示不全等问题用下面方式避免,官网说明,链接"></a>8.代码显示不全等问题用下面方式避免,官网说明,<a href="https://hexo.io/docs/tag-plugins.html#Raw" target="_blank" rel="external">链接</a></h3><pre><code>{% codeblock lang:objc %}
[rectangle setX: 10 y: 10 width: 20 height: 20];
{% endcodeblock %}
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-创建分类&quot;&gt;&lt;a href=&quot;#1-创建分类&quot; class=&quot;headerlink&quot; title=&quot;1.创建分类&quot;&gt;&lt;/a&gt;1.创建分类&lt;/h3&gt;&lt;p&gt;建立分类文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo new page categories
&lt;/code
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
  <entry>
    <title>GitHub + Hexo 搭建博客总结(一)</title>
    <link href="https://sukeyang.github.io/2016/06/04/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>https://sukeyang.github.io/2016/06/04/博客搭建/</id>
    <published>2016-06-04T08:40:33.000Z</published>
    <updated>2017-02-20T12:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装配置环境"><a href="#安装配置环境" class="headerlink" title="安装配置环境"></a>安装配置环境</h3><p>1.安装Node.js,<a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs官网</a></p>
<p>2.安装hexo </p>
<pre><code>sudo npm install hexo-cli -g
</code></pre><p>3.初始化Hexo</p>
<pre><code>hexo init
</code></pre><p>4.安装依赖<br><a id="more"></a></p>
<pre><code>npm install
npm install hexo-server --save     #服务器
</code></pre><p>5.启动Hexo</p>
<pre><code>hexo server
</code></pre><p>或者简写</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s
</code></pre><p>然后浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 你会看到Hexo的示例页面.</p>
<p>6.配置github,创建代码仓库,这个仓库的名字需要和你的账号对应。格式:  yourname.github.io ,然后 <a href="https://yourname.github.io" target="_blank" rel="external">https://yourname.github.io</a> ,就是部署的网页地址<br><a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/" target="_blank" rel="external">Generating a new SSH key</a><br>7.config 的一些配置</p>
<pre><code>Plugins:  #插件
- hexo-generator-feed
- hexo-generator-sitemap
#Feed Atom
feed:
    type: atom
    path: atom.xml
    limit: 20

#sitemap
sitemap:
    path: sitemap.xml

theme: jacman #主题更换themes/

# Deployment
## Docs: https://hexo.io/docs/deployment.html
deploy:
   type: git
   repo: https://github.com/410900345/410900345.github.io.git #github仓库地址
   branch: master # github分支
</code></pre><p><code>格式要比上一行多两个空格,才能正确</code><br>8.jacman主题的使用,<a href="http://wuchong.me/blog/2014/11/20/how-to-use-jacman/" target="_blank" rel="external">传送门</a>,在jacman/_config.yml里面设置,评论 comments填写duoshuo_shortname多说的用户名，启用多说评论系统。</p>
<h3 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h3><p>1.新建文章</p>
<pre><code>hexo new &quot;test&quot;
</code></pre><p>2.生成静态网站</p>
<pre><code>hexo generate
</code></pre><p>3.hexo部署</p>
<pre><code>hexo deploy     
</code></pre><p>或者简写</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d
</code></pre><p>提示<code>[info] Deploy done: git</code> 说明部署成功,<a href="https://410900345.github.io" target="_blank" rel="external">我的个人博客</a></p>
<p>4.更换主题 <a href="https://github.com/wuchong/jacman" target="_blank" rel="external">jacman</a></p>
<pre><code>cd  hexo
git clone https://github.com/wuchong/jacman.git themes/jacman
</code></pre><p>5.sitemap &amp; rss访问/atom.xml和/sitemap.xml</p>
<pre><code>$ npm install hexo-generator-feed --save
$ npm install hexo-generator-sitemap --save
$ npm install hexo-generator-baidu-sitemap --save
$ hexo generate   
</code></pre><p><code>必须执行最后一步generate才生效</code></p>
<h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>1.白板和Cannot GET / 几个字,我们需要手动配置些东西，我们需要输入下面三行命令：</p>
<pre><code>npm install hexo-renderer-ejs --save
npm install hexo-renderer-stylus --save
npm install hexo-renderer-marked --save
这个时候再重新生成静态文件，命令：
hexo generate （或hexo g）
启动本地服务器：
hexo server （或hexo s）
</code></pre><p>2.如果在博客文章列表中，不想全文显示，可以增加 <!--more-->, 后面的内容就不会显示 </p>
<pre><code>&lt;!--more--&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装配置环境&quot;&gt;&lt;a href=&quot;#安装配置环境&quot; class=&quot;headerlink&quot; title=&quot;安装配置环境&quot;&gt;&lt;/a&gt;安装配置环境&lt;/h3&gt;&lt;p&gt;1.安装Node.js,&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Nodejs官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.安装hexo &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo npm install hexo-cli -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.初始化Hexo&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hexo init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.安装依赖&lt;br&gt;
    
    </summary>
    
      <category term="tools" scheme="https://sukeyang.github.io/categories/tools/"/>
    
    
  </entry>
  
</feed>
